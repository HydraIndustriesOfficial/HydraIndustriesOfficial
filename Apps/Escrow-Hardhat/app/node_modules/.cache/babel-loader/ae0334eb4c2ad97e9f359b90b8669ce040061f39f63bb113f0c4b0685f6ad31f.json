{"ast":null,"code":"var _jsxFileName = \"/Users/kbookout/escrow-hardhat/app/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Network, Alchemy } from \"alchemy-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nim;\n\n// const settings = {\n//   apiKey: `${process.env.ALCHEMY_API_KEY}}`,\n//   network: Network.MATIC_MUMBAI,\n// };\n\n// const alchemy = new Alchemy(settings);\n\n// // Get the latest block\n// const latestBlock = alchemy.core.getBlockNumber();\n\n// // Get all outbound transfers for a provided address\n// alchemy.core\n//   .getTokenBalances(\"0x994b342dd87fc825f66e51ffa3ef71ad818b6893\")\n//   .then(console.log);\n\n// // Get all the NFTs owned by an address\n// const nfts = alchemy.nft.getNftsForOwner(\"\");\n\n// // Listen to all new pending transactions\n// alchemy.ws.on(\n//   {\n//     method: \"alchemy_pendingTransactions\",\n//     fromAddress: `${process.env.WALLET_ADDRESS}`,\n//   },\n//   (res) => console.log(res)\n// );\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nif (!window.ethereum) {\n  root.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: \"You need to install a browser wallet to build the escrow dapp\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this));\n} else {\n  root.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this));\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","Network","Alchemy","jsxDEV","_jsxDEV","im","root","createRoot","document","getElementById","window","ethereum","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/kbookout/escrow-hardhat/app/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Network, Alchemy } from \"alchemy-sdk\";\nim\n\n// const settings = {\n//   apiKey: `${process.env.ALCHEMY_API_KEY}}`,\n//   network: Network.MATIC_MUMBAI,\n// };\n\n// const alchemy = new Alchemy(settings);\n\n// // Get the latest block\n// const latestBlock = alchemy.core.getBlockNumber();\n\n// // Get all outbound transfers for a provided address\n// alchemy.core\n//   .getTokenBalances(\"0x994b342dd87fc825f66e51ffa3ef71ad818b6893\")\n//   .then(console.log);\n\n// // Get all the NFTs owned by an address\n// const nfts = alchemy.nft.getNftsForOwner(\"\");\n\n// // Listen to all new pending transactions\n// alchemy.ws.on(\n//   {\n//     method: \"alchemy_pendingTransactions\",\n//     fromAddress: `${process.env.WALLET_ADDRESS}`,\n//   },\n//   (res) => console.log(res)\n// );\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nif (!window.ethereum) {\n  root.render(\n    <React.StrictMode>\n      You need to install a browser wallet to build the escrow dapp\n    </React.StrictMode>\n  );\n} else {\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,aAAa;AACpB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC/CC,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAGR,QAAQ,CAACS,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjE,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;EACpBL,IAAI,CAACM,MAAM,eACTR,OAAA,CAACP,KAAK,CAACgB,UAAU;IAAAC,QAAA,EAAC;EAElB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAkB,CACpB,CAAC;AACH,CAAC,MAAM;EACLZ,IAAI,CAACM,MAAM,eACTR,OAAA,CAACP,KAAK,CAACgB,UAAU;IAAAC,QAAA,eACfV,OAAA,CAACL,GAAG;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CACpB,CAAC;AACH;;AAEA;AACA;AACA;AACAlB,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}