{"ast":null,"code":"var _jsxFileName = \"/Users/kbookout/escrow-hardhat/app/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Network, Alchemy } from \"alchemy-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: `${process.env.ALCHEMY_API_KEY}}`,\n  network: Network.MATIC_MUMBAI\n};\nconst alchemy = new Alchemy(settings);\n\n// Get the latest block\nconst latestBlock = alchemy.core.getBlockNumber();\n\n// Get all outbound transfers for a provided address\nalchemy.core.getTokenBalances(\"0x994b342dd87fc825f66e51ffa3ef71ad818b6893\").then(console.log);\n\n// Get all the NFTs owned by an address\nconst nfts = alchemy.nft.getNftsForOwner(\"\");\n\n// Listen to all new pending transactions\nalchemy.ws.on({\n  method: \"alchemy_pendingTransactions\",\n  fromAddress: `${process.env.WALLET_ADDRESS}`\n}, res => console.log(res));\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nif (!window.ethereum) {\n  root.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: \"You need to install a browser wallet to build the escrow dapp\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this));\n} else {\n  root.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this));\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","Network","Alchemy","jsxDEV","_jsxDEV","settings","apiKey","process","env","ALCHEMY_API_KEY","network","MATIC_MUMBAI","alchemy","latestBlock","core","getBlockNumber","getTokenBalances","then","console","log","nfts","nft","getNftsForOwner","ws","on","method","fromAddress","WALLET_ADDRESS","res","root","createRoot","document","getElementById","window","ethereum","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/kbookout/escrow-hardhat/app/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\nconst settings = {\n  apiKey: `${process.env.ALCHEMY_API_KEY}}`,\n  network: Network.MATIC_MUMBAI,\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Get the latest block\nconst latestBlock = alchemy.core.getBlockNumber();\n\n// Get all outbound transfers for a provided address\nalchemy.core\n  .getTokenBalances(\"0x994b342dd87fc825f66e51ffa3ef71ad818b6893\")\n  .then(console.log);\n\n// Get all the NFTs owned by an address\nconst nfts = alchemy.nft.getNftsForOwner(\"\");\n\n// Listen to all new pending transactions\nalchemy.ws.on(\n  {\n    method: \"alchemy_pendingTransactions\",\n    fromAddress: `${process.env.WALLET_ADDRESS}`,\n  },\n  (res) => console.log(res)\n);\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nif (!window.ethereum) {\n  root.render(\n    <React.StrictMode>\n      You need to install a browser wallet to build the escrow dapp\n    </React.StrictMode>\n  );\n} else {\n  root.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,aAAa;AACpB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,QAAQ,GAAG;EACfC,MAAM,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,eAAgB,GAAE;EACzCC,OAAO,EAAET,OAAO,CAACU;AACnB,CAAC;AAED,MAAMC,OAAO,GAAG,IAAIV,OAAO,CAACG,QAAQ,CAAC;;AAErC;AACA,MAAMQ,WAAW,GAAGD,OAAO,CAACE,IAAI,CAACC,cAAc,CAAC,CAAC;;AAEjD;AACAH,OAAO,CAACE,IAAI,CACTE,gBAAgB,CAAC,4CAA4C,CAAC,CAC9DC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;;AAEpB;AACA,MAAMC,IAAI,GAAGR,OAAO,CAACS,GAAG,CAACC,eAAe,CAAC,EAAE,CAAC;;AAE5C;AACAV,OAAO,CAACW,EAAE,CAACC,EAAE,CACX;EACEC,MAAM,EAAE,6BAA6B;EACrCC,WAAW,EAAG,GAAEnB,OAAO,CAACC,GAAG,CAACmB,cAAe;AAC7C,CAAC,EACAC,GAAG,IAAKV,OAAO,CAACC,GAAG,CAACS,GAAG,CAC1B,CAAC;AAED,MAAMC,IAAI,GAAG/B,QAAQ,CAACgC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjE,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;EACpBL,IAAI,CAACM,MAAM,eACT/B,OAAA,CAACP,KAAK,CAACuC,UAAU;IAAAC,QAAA,EAAC;EAElB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAkB,CACpB,CAAC;AACH,CAAC,MAAM;EACLZ,IAAI,CAACM,MAAM,eACT/B,OAAA,CAACP,KAAK,CAACuC,UAAU;IAAAC,QAAA,eACfjC,OAAA,CAACL,GAAG;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CACpB,CAAC;AACH;;AAEA;AACA;AACA;AACAzC,eAAe,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}